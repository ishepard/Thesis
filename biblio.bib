% book
% Required fields: author or editor, title, publisher, year. 
% Optional fields: volume or number, series, address, edition, month, note.

@article{aggregation,
author = {Jelasity, M{\'{a}}rk and Montresor, Alberto and Babaoglu, Ozalp and Bologna, Universit{\`{a}}},
file = {:Users/shepard/Documents/University of Trento/Thesis/thesis/documents/aggregation-tocs.pdf:pdf},
number = {August},
pages = {1--32},
title = {{Gossip-based Aggregation in Large Dynamic Networks ∗}},
volume = {23},
year = {2005}
}

@inproceedings{wormhole,
abstract = {State of the art gossip protocols for the Internet are based on the assumption that connection establishment between peers comes at negligible cost. Our experience with commercially deployed P2P systems has shown that this cost is much higher than generally assumed. As such, peer sampling services often cannot provide fresh samples because the service would require too high a connection establishment rate. In this paper, we present the wormhole-based peer sampling service (WPSS). WPSS over-comes the limitations of existing protocols by executing short random walks over a stable topology and by using shortcuts (wormholes), thus limiting the rate of connection establishments and guaranteeing freshness of samples, respectively. We show that our approach can decrease the connection establishment rate by one order of magnitude compared to the state of the art while providing the same levels of freshness of samples. This, without sacrificing the desirable properties of a PSS for the Internet, such as robustness to churn and NAT-friendliness. We support our claims with a thorough measurement study in our deployed commercial system as well as in simulation.},
author = {Roverso, Roberto and Dowling, Jim and Jelasity, Mark},
booktitle = {IEEE P2P 2013 Proceedings},
doi = {10.1109/P2P.2013.6688707},
file = {:Users/shepard/Desktop/06688707.pdf:pdf},
isbn = {978-1-4799-0515-7},
keywords = {NAT-resilient gossip protocols,P2P Networks,Peer Sampling},
month = sep,
pages = {1--10},
publisher = {IEEE},
title = {{Through the wormhole: Low cost, fresh peer sampling for the Internet}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6688707},
year = {2013}
}

@inproceedings{spotify,
abstract = {Spotify is a music streaming service offering low-latency access to a library of over 8 million music tracks. Streaming is performed by a combination of client-server access and a peer-to-peer protocol. In this paper, we give an overview of the protocol and peer-to-peer architecture used and provide measurements of service performance and user behavior. The service currently has a user base of over 7 million and has been available in six European countries since October 2008. Data collected indicates that the combination of the client-server and peer-to-peer paradigms can be applied to music streaming with good results. In particular, 8.8{\%} of music data played comes from Spotify's servers while the median playback latency is only 265 ms (including cached tracks). We also discuss the user access patterns observed and how the peer-to-peer network affects the access patterns as they reach the server.},
author = {Kreitz, Gunnar and Niemela, F.},
booktitle = {2010 IEEE Tenth International Conference on Peer-to-Peer Computing (P2P)},
doi = {10.1109/P2P.2010.5569963},
file = {:Users/shepard/Documents/University of Trento/Thesis/thesis/documents/spotify-p2p10.pdf:pdf},
isbn = {978-1-4244-7140-9},
issn = {0743-166X},
month = aug,
pages = {1--10},
publisher = {IEEE},
title = {{Spotify -- Large Scale, Low Latency, P2P Music-on-Demand Streaming}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5569963},
year = {2010}
}


@article{gossip_protocol,
abstract = {Gossip-based communication protocols are appealing in large-scale distributed applications such as information dissemination, aggregation, and overlay topology management. This paper factors out a fundamental mechanism at the heart of all these protocols: the peer-sampling service. In short, this service provides every node with peers to gossip with. We promote this service to the level of a first-class abstraction of a large-scale distributed system, similar to a name service being a first-class abstraction of a local-area system. We present a generic framework to implement a peer-sampling service in a decentralized manner by constructing and maintaining dynamic unstructured overlays through gossiping membership information itself. Our framework generalizes existing approaches and makes it easy to discover new ones. We use this framework to empirically explore and compare several implementations of the peer-sampling service. Through extensive simulation experiments we show that---although all protocols provide a good quality uniform random stream of peers to each node locally---traditional theoretical assumptions about the randomness of the unstructured overlays as a whole do not hold in any of the instances. We also show that different design decisions result in severe differences from the point of view of two crucial aspects: load balancing and fault tolerance. Our simulations are validated by means of a wide-area implementation.},
author = {Jelasity, M{\'{a}}rk and Voulgaris, Spyros and Guerraoui, Rachid and Kermarrec, Anne-Marie and van Steen, Maarten},
doi = {10.1145/1275517.1275520},
file = {:Users/shepard/Documents/University of Trento/Thesis/thesis/documents/all.pdf:pdf},
issn = {07342071},
journal = {ACM Transactions on Computer Systems},
month = aug,
number = {3},
title = {{Gossip-based peer sampling}},
url = {http://portal.acm.org/citation.cfm?doid=1275517.1275520},
volume = {25},
year = {2007}
}


@article{rw,
abstract = {This paper presents a detailed examination of how the dynamic and heterogeneous nature of real-world peer-to-peer systems can introduce bias into the selection of representative samples of peer properties (e.g., degree, link bandwidth, number of files shared). We propose the metropolized random walk with backtracking (MRWB) as a viable and promising technique for collecting nearly unbiased samples and conduct an extensive simulation study to demonstrate that our technique works well for a wide variety of commonly-encountered peer-to-peer network conditions. We have implemented the MRWB algorithm for selecting peer addresses uniformly at random into a tool called ion-sampler. Using the Gnutella network, we empirically show that ion-sampler yields more accurate samples than tools that rely on commonly-used sampling techniques and results in dramatic improvements in efficiency and scalability compared to performing a full crawl.},
author = {Stutzbach, Daniel and Rejaie, Reza and Duffield, Nick and Sen, Subhabrata and Willinger, Walter},
doi = {10.1109/TNET.2008.2001730},
file = {:Users/shepard/Documents/University of Trento/Thesis/thesis/documents/p3-stutzbach1.pdf:pdf},
isbn = {1595935614},
issn = {1063-6692},
journal = {IEEE/ACM Transactions on Networking},
keywords = {Peer-to-peer,Sampling},
month = apr,
number = {2},
pages = {377--390},
title = {{On Unbiased Sampling for Unstructured Peer-to-Peer Networks}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4637905},
volume = {17},
year = {2009}
}


@incollection{gozar,
abstract = {Gossip-based peer sampling protocols have been widely used as a building block for many large-scale distributed applications. However, Network Address Translation gateways (NATs) cause most existing gossiping protocols to break down, as nodes cannot establish direct connections to nodes behind NATs (private nodes). In addition, most of the existing NAT traversal algorithms for establishing connectivity to private nodes rely on third party servers running at a well-known, public IP addresses. In this paper, we present Gozar, a gossip-based peer sampling service that: (i) provides uniform random samples in the presence of NATs, and (ii) enables direct connectivity to sampled nodes using a fully distributed NAT traversal service, where connection messages require only a single hop to connect to private nodes. We show in simulation that Gozar preserves the randomness properties of a gossip-based peer sampling service. We show the robustness of Gozar when a large fraction of nodes reside behind NATs and also in catastrophic failure scenarios. For example, if 80{\%} of nodes are behind NATs, and 80{\%} of the nodes fail, more than 92{\%} of the remaining nodes stay connected. In addition, we compare Gozar with existing NAT-friendly gossip-based peer sampling services, Nylon and ARRG. We show that Gozar is the only system that supports one-hop NAT traversal, and its overhead is roughly half of Nylon’s.},
author = {Payberah, Amir H. and Dowling, Jim and Haridi, Seif},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-21387-8{\_}1},
file = {:Users/shepard/Documents/University of Trento/Thesis/thesis/documents/gozar.pdf:pdf},
isbn = {9783642213861},
issn = {03029743},
pages = {1--14},
title = {{Gozar: NAT-Friendly Peer Sampling with One-Hop Distributed NAT Traversal}},
url = {http://link.springer.com/10.1007/978-3-642-21387-8{\_}1},
volume = {6723 LNCS},
year = {2011}
}


@inproceedings{croupier,
abstract = {Despite much recent research on peer-to-peer (P2P) protocols for the Internet, there have been relatively few practical protocols designed to explicitly account for Network Address Translation gateways (NATs). Those P2P protocols that do handle NATs circumvent them using relaying and hole-punching techniques to route packets to nodes residing behind NATs. In this paper, we present Croupier, a peer sampling service (PSS) that provides uniform random samples of nodes in the presence of NATs in the network. It is the first NAT-aware PSS that works without the use of relaying or hole-punching. By removing the need for relaying and hole-punching, we decrease the complexity and overhead of our protocol as well as increase its robustness to churn and failure. We evaluated Croupier in simulation, and, in comparison with existing NAT-aware PSS', our results show similar randomness properties, but improved robustness in the presence of both high percentages of nodes behind NATs and massive node failures. Croupier also has substantially lower protocol overhead.},
author = {Dowling, Jim and Payberah, Amir H.},
booktitle = {2012 IEEE 32nd International Conference on Distributed Computing Systems},
doi = {10.1109/ICDCS.2012.19},
file = {:Users/shepard/Documents/University of Trento/Thesis/thesis/documents/croupier.pdf:pdf},
isbn = {978-1-4577-0295-2},
issn = {1063-6927},
keywords = {Gossip peer sampling,NAT,P2P networks},
month = jun,
pages = {102--111},
publisher = {IEEE},
title = {{Shuffling with a Croupier: Nat-Aware Peer-Sampling}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6257983},
year = {2012}
}


@article{skype,
abstract = {Despite its popularity, relatively little is known about the traffic characteristics of the Skype VoIP system and how they differ from other P2P systems. We describe an experimental study of Skype VoIP traffic conducted over a five month period, where over 82 mil- lion datapoints were collected regarding the population of online clients, the number of supernodes, and their traffic characteristics. This data was collected from September 1, 2005 to January 14, 2006. Experiments on this data were done in a black-box manner, i.e., without knowing the internals or specifics of the Skype system or messages, as Skype encrypts all user traffic and signaling traffic payloads. The results indicate that although the structure of the Skype system appears to be similar to other P2P systems, particu- larly KaZaA, there are several significant differences in traffic. The number of active clients shows diurnal and work-week behavior, correlating with normal working hours regardless of geography. The population of supernodes in the system tends to be relatively stable; thus node churn, a significant concern in other systems, seems less problematic in Skype. The typical bandwidth load on a supernode is relatively low, even if the supernode is relaying VoIP traffic. The paper aims to aid further understanding of a significant, successful P2P VoIP system, as well as provide experimental data that may be useful for future design and modeling of such sys- tems. These results also imply that the nature of aVoIP P2P system like Skype differs fundamentally from earlier P2P systems that are oriented toward file-sharing, and music and video download appli- cations, and deserves more attention from the research community.},
author = {Guha, Saikat and Daswani, Neil},
doi = {10.1.1.60.8654},
file = {:Users/shepard/Documents/University of Trento/Thesis/thesis/documents/Guha-skype06.pdf:pdf},
journal = {Proceedings of IPTPS},
pages = {5--10},
title = {{An experimental study of the {Skype} peer-to-peer {VoIP} system}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.60.8654{\&}amp;rep=rep1{\&}amp;type=pdf$\backslash$nhttp://dspace.library.cornell.edu/handle/1813/5711},
volume = {6},
year = {2005},
pages = {pp. 1–6}
}



S. Chib and E. Greenberg, “Understanding the metropolis-hastings algorithm,” The American Statistician, vol. 49, no. 4, pp. 327–335.

% article
% Required fields: author, title, journal, year. 
% Optional fields: volume, number, pages, month, note.

@article{metropolis,
author = {Chib, Siddhartha and Greenberg, Edward},
doi = {10.1080/00031305.1995.10476177},
file = {:Users/shepard/Documents/University of Trento/Thesis/thesis/documents/Chib and Greenberg - Understanding the Metropolis-Hastings Algorithm.pdf:pdf},
isbn = {0003-1305},
issn = {0003-1305},
journal = {The American Statistician},
keywords = {carlo,gibbs sampling,markov chain monte,multivariate density simulation,reversible},
month = nov,
number = {4},
pages = {327--335},
title = {{Understanding the Metropolis-Hastings Algorithm}},
url = {http://www.tandfonline.com/doi/abs/10.1080/00031305.1995.10476177},
volume = {49},
year = {1995}
}


% website
% as misc
% Required fields: none. 
% Optional fields: author, title, howpublished, month, year, note.

@misc{webrtc,
  author = {WWW Group},
  title = {WebRTC 1.0: Real-time communication between browsers (working draft)},
  urldate = {2016-01-16}
}
}

@misc{easyrtc,
  author = {Priologic},
  title = {EasyRTC},
  howpublished = "\url{https://easyrtc.com/docs/guides/}",
  urldate = {2016-02-10}
}

@misc{started_with_webrtc,
title = {Getting Started with {WebRTC}},
author = {Dutton, Sam},
howpublished = "\url{http://www.html5rocks.com/en/tutorials/webrtc/basics/}",
urldate = {2016-02-10}
}

@techreport{jsep,
  author = {Justin Uberti and Cullen Jennings and Eric Rescorla},
  title = {Javascript Session Establishment Protocol},
  howpublished = {Working Draft},
  type = {Internet-Draft},
  number = {draft-ietf-rtcweb-jsep-12},
  year = {2015},
  month = {October},
  institution = {IETF Secretariat},
  url = {http://www.ietf.org/internet-drafts/draft-ietf-rtcweb-jsep-12.txt},
  note = {\url{http://www.ietf.org/internet-drafts/draft-ietf-rtcweb-jsep-12.txt}},
}


@techreport{sdp,
  author = {Mark Handley and Van Jacobson},
  title = {{SDP}: Session Description Protocol},
  howpublished = {Internet Requests for Comments},
  type = {RFC},
  number = {2327},
  year = {1998},
  month = apr,
  issn = {2070-1721},
  publisher = {RFC Editor},
  institution = {RFC Editor},
  url = {http://www.rfc-editor.org/rfc/rfc2327.txt},
  note = {\url{http://www.rfc-editor.org/rfc/rfc2327.txt}},
}

@techreport{nat,
  author = {Pyda Srisuresh and Matt Holdrege},
  title = {{IP} Network Address Translator ({NAT}) Terminology and Considerations},
  howpublished = {Internet Requests for Comments},
  type = {RFC},
  number = {2663},
  year = {1999},
  month = aug,
  issn = {2070-1721},
  publisher = {RFC Editor},
  institution = {RFC Editor},
  url = {http://www.rfc-editor.org/rfc/rfc2663.txt},
  note = {\url{http://www.rfc-editor.org/rfc/rfc2663.txt}},
}

@misc{webrtc_infrastructure,
author = {Dutton, Sam},
title = {{WebRTC} in the real world: {STUN}, {TURN} and signaling},
howpublished = "\url{http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/}",
urldate = {2016-02-10}
}






